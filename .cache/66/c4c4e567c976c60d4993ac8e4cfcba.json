{"id":"index.html","dependencies":[{"name":"C:\\Users\\acer\\OneDrive\\Desktop\\tasky\\src\\public\\logo.jpeg","dynamic":true,"resolved":"C:\\Users\\acer\\OneDrive\\Desktop\\tasky\\src\\public\\logo.jpeg","parent":"C:\\Users\\acer\\OneDrive\\Desktop\\tasky\\src\\index.html"},{"name":"C:\\Users\\acer\\OneDrive\\Desktop\\tasky\\src\\manifest.webmanifest","dynamic":true,"resolved":"C:\\Users\\acer\\OneDrive\\Desktop\\tasky\\src\\manifest.webmanifest","entry":true,"parent":"C:\\Users\\acer\\OneDrive\\Desktop\\tasky\\src\\index.html"},{"name":"./index.tsx","dynamic":true,"resolved":"C:\\Users\\acer\\OneDrive\\Desktop\\tasky\\src\\index.tsx","parent":"C:\\Users\\acer\\OneDrive\\Desktop\\tasky\\src\\index.html"},{"name":"C:\\Users\\acer\\OneDrive\\Desktop\\tasky\\package.json","includedInParent":true,"mtime":1705908366237}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    <meta name=\"theme-color\" content=\"#000000\">\n   \n    <link rel=\"icon\" type=\"image/png\" href=\"/a951b2e8f445de19b76cea602b52350a.jpeg\">\n    <link rel=\"manifest\" href=\"/7eccd054504b2e78aedeea1df032aeb4.webmanifest\">\n\n    <title>Tasky</title>\n  </head>\n\n  <body>\n    <noscript>\n      You need to enable JavaScript to run this app.\n    </noscript>\n    <div id=\"root\"></div>\n    <!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n    <script src=\"/ce8d93a16385590b555954a5f69400ca.js\"></script>\n    <script>const sw = \"service-worker.js\"; // it is needed because parcel will not recognize this as a file and not precess in its manner\n\nnavigator.serviceWorker.register(sw).then(registration => {\n  registration.onupdatefound = () => {\n    const installingWorker = registration.installing;\n    if (installingWorker == null) {\n      return;\n    }\n    installingWorker.onstatechange = () => {\n      if (installingWorker.state === \"installed\") {\n        if (navigator.serviceWorker.controller) {\n          console.info(\"New content is available and will be used when all \" + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\n        } else {\n          console.info(\"Content is cached for offline use.\");\n        }\n      }\n    };\n  };\n}).catch(error => {\n  console.error(\"Error during service worker registration:\", error);\n});</script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"66db79712fc889521998d25c4160b97c","cacheData":{"env":{}}}