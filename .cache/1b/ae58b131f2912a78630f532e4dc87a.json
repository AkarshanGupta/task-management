{"id":"CeWy","dependencies":[{"name":"C:\\Users\\acer\\OneDrive\\Desktop\\tasky\\node_modules\\@reach\\auto-id\\dist\\auto-id.esm.js.map","includedInParent":true,"mtime":1705864172078},{"name":"C:\\Users\\acer\\OneDrive\\Desktop\\tasky\\package.json","includedInParent":true,"mtime":1705908366237},{"name":"C:\\Users\\acer\\OneDrive\\Desktop\\tasky\\node_modules\\@reach\\auto-id\\package.json","includedInParent":true,"mtime":1705864170719},{"name":"react","loc":{"line":1,"column":36,"index":36},"parent":"C:\\Users\\acer\\OneDrive\\Desktop\\tasky\\node_modules\\@reach\\auto-id\\dist\\auto-id.esm.js","resolved":"C:\\Users\\acer\\OneDrive\\Desktop\\tasky\\node_modules\\react\\index.js"},{"name":"@reach/utils","loc":{"line":2,"column":42,"index":87},"parent":"C:\\Users\\acer\\OneDrive\\Desktop\\tasky\\node_modules\\@reach\\auto-id\\dist\\auto-id.esm.js","resolved":"C:\\Users\\acer\\OneDrive\\Desktop\\tasky\\node_modules\\@reach\\utils\\dist\\utils.esm.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.useId=void 0;var e=require(\"react\"),t=require(\"@reach/utils\"),u=!1,r=0,n=function(){return++r},o=exports.useId=function(r){var o=r||(u?n():null),i=(0,e.useState)(o),s=i[0],c=i[1];return(0,t.useIsomorphicLayoutEffect)(function(){null===s&&c(n())},[]),(0,e.useEffect)(function(){!1===u&&(u=!0)},[]),null!=s?String(s):void 0};"},"sourceMaps":{"js":{"mappings":[{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":0}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":13}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":20}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":35}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":43}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":56}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":57}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":64}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":68}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":76}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":87}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":89}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":93}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":95}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":103}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":112}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":114}},{"source":"../src/index.ts","name":null,"original":{"line":108,"column":1},"generated":{"line":1,"column":122}},{"source":"../src/index.ts","name":"serverHandoffComplete","original":{"line":60,"column":4},"generated":{"line":1,"column":138}},{"source":"../src/index.ts","name":null,"original":{"line":60,"column":28},"generated":{"line":1,"column":141}},{"source":"../src/index.ts","name":"id","original":{"line":61,"column":4},"generated":{"line":1,"column":143}},{"source":"../src/index.ts","name":null,"original":{"line":61,"column":9},"generated":{"line":1,"column":145}},{"source":"../src/index.ts","name":"genId","original":{"line":62,"column":6},"generated":{"line":1,"column":147}},{"source":"../src/index.ts","name":null,"original":{"line":62,"column":14},"generated":{"line":1,"column":149}},{"source":"../src/index.ts","name":null,"original":{"line":62,"column":14},"generated":{"line":1,"column":160}},{"source":"../src/index.ts","name":"id","original":{"line":62,"column":22},"generated":{"line":1,"column":168}},{"source":"../src/index.ts","name":"useId","original":{"line":75,"column":13},"generated":{"line":1,"column":171}},{"source":"../src/index.ts","name":null,"original":{"line":75,"column":18},"generated":{"line":1,"column":173}},{"source":"../src/index.ts","name":null,"original":{"line":75,"column":18},"generated":{"line":1,"column":181}},{"source":"../src/index.ts","name":null,"original":{"line":75,"column":21},"generated":{"line":1,"column":187}},{"source":"../src/index.ts","name":"idFromProps","original":{"line":75,"column":22},"generated":{"line":1,"column":196}},{"source":"../src/index.ts","name":null,"original":{"line":80,"column":2},"generated":{"line":1,"column":199}},{"source":"../src/index.ts","name":"initialId","original":{"line":80,"column":8},"generated":{"line":1,"column":203}},{"source":"../src/index.ts","name":"idFromProps","original":{"line":80,"column":20},"generated":{"line":1,"column":205}},{"source":"../src/index.ts","name":"serverHandoffComplete","original":{"line":80,"column":36},"generated":{"line":1,"column":209}},{"source":"../src/index.ts","name":"genId","original":{"line":80,"column":60},"generated":{"line":1,"column":211}},{"source":"../src/index.ts","name":null,"original":{"line":80,"column":70},"generated":{"line":1,"column":215}},{"source":"../src/index.ts","name":"useState","original":{"line":82,"column":22},"generated":{"line":1,"column":221}},{"source":"../src/index.ts","name":"useState","original":{"line":82,"column":22},"generated":{"line":1,"column":224}},{"source":"../src/index.ts","name":"useState","original":{"line":82,"column":22},"generated":{"line":1,"column":226}},{"source":"../src/index.ts","name":null,"original":{"line":82,"column":30},"generated":{"line":1,"column":228}},{"source":"../src/index.ts","name":"initialId","original":{"line":82,"column":31},"generated":{"line":1,"column":238}},{"source":"../src/index.ts","name":"id","original":{"line":82,"column":9},"generated":{"line":1,"column":241}},{"source":"../src/index.ts","name":"id","original":{"line":82,"column":9},"generated":{"line":1,"column":243}},{"source":"../src/index.ts","name":"id","original":{"line":82,"column":9},"generated":{"line":1,"column":245}},{"source":"../src/index.ts","name":"setId","original":{"line":82,"column":13},"generated":{"line":1,"column":248}},{"source":"../src/index.ts","name":"setId","original":{"line":82,"column":13},"generated":{"line":1,"column":250}},{"source":"../src/index.ts","name":"setId","original":{"line":82,"column":13},"generated":{"line":1,"column":252}},{"source":"../src/index.ts","name":null,"original":{"line":107,"column":2},"generated":{"line":1,"column":255}},{"source":"../src/index.ts","name":"useIsomorphicLayoutEffect","original":{"line":84,"column":2},"generated":{"line":1,"column":262}},{"source":"../src/index.ts","name":"useIsomorphicLayoutEffect","original":{"line":84,"column":2},"generated":{"line":1,"column":264}},{"source":"../src/index.ts","name":null,"original":{"line":84,"column":27},"generated":{"line":1,"column":266}},{"source":"../src/index.ts","name":null,"original":{"line":84,"column":28},"generated":{"line":1,"column":293}},{"source":"../src/index.ts","name":null,"original":{"line":85,"column":15},"generated":{"line":1,"column":304}},{"source":"../src/index.ts","name":"id","original":{"line":85,"column":8},"generated":{"line":1,"column":311}},{"source":"../src/index.ts","name":"setId","original":{"line":92,"column":6},"generated":{"line":1,"column":314}},{"source":"../src/index.ts","name":"genId","original":{"line":92,"column":12},"generated":{"line":1,"column":316}},{"source":"../src/index.ts","name":null,"original":{"line":95,"column":5},"generated":{"line":1,"column":322}},{"source":"../src/index.ts","name":"useEffect","original":{"line":97,"column":2},"generated":{"line":1,"column":327}},{"source":"../src/index.ts","name":"useEffect","original":{"line":97,"column":2},"generated":{"line":1,"column":329}},{"source":"../src/index.ts","name":null,"original":{"line":97,"column":11},"generated":{"line":1,"column":331}},{"source":"../src/index.ts","name":null,"original":{"line":97,"column":12},"generated":{"line":1,"column":342}},{"source":"../src/index.ts","name":null,"original":{"line":98,"column":34},"generated":{"line":1,"column":354}},{"source":"../src/index.ts","name":"serverHandoffComplete","original":{"line":98,"column":8},"generated":{"line":1,"column":358}},{"source":"../src/index.ts","name":"serverHandoffComplete","original":{"line":104,"column":6},"generated":{"line":1,"column":362}},{"source":"../src/index.ts","name":null,"original":{"line":104,"column":30},"generated":{"line":1,"column":365}},{"source":"../src/index.ts","name":null,"original":{"line":106,"column":5},"generated":{"line":1,"column":369}},{"source":"../src/index.ts","name":null,"original":{"line":107,"column":15},"generated":{"line":1,"column":373}},{"source":"../src/index.ts","name":"id","original":{"line":107,"column":9},"generated":{"line":1,"column":379}},{"source":"../src/index.ts","name":"String","original":{"line":107,"column":22},"generated":{"line":1,"column":381}},{"source":"../src/index.ts","name":"id","original":{"line":107,"column":29},"generated":{"line":1,"column":388}},{"source":"../src/index.ts","name":"undefined","original":{"line":107,"column":35},"generated":{"line":1,"column":396}}],"sources":{"../src/index.ts":"/*\n * Welcome to @reach/auto-id!\n\n * Let's see if we can make sense of why this hook exists and its\n * implementation.\n *\n * Some background:\n *   1. Accessibiliy APIs rely heavily on element IDs\n *   2. Requiring developers to put IDs on every element in Reach UI is both\n *      cumbersome and error-prone\n *   3. With a component model, we can generate IDs for them!\n *\n * Solution 1: Generate random IDs.\n *\n * This works great as long as you don't server render your app. When React (in\n * the client) tries to reuse the markup from the server, the IDs won't match\n * and React will then recreate the entire DOM tree.\n *\n * Solution 2: Increment an integer\n *\n * This sounds great. Since we're rendering the exact same tree on the server\n * and client, we can increment a counter and get a deterministic result between\n * client and server. Also, JS integers can go up to nine-quadrillion. I'm\n * pretty sure the tab will be closed before an app never needs\n * 10 quadrillion IDs!\n *\n * Problem solved, right?\n *\n * Ah, but there's a catch! React's concurrent rendering makes this approach\n * non-deterministic. While the client and server will end up with the same\n * elements in the end, depending on suspense boundaries (and possibly some user\n * input during the initial render) the incrementing integers won't always match\n * up.\n *\n * Solution 3: Don't use IDs at all on the server; patch after first render.\n *\n * What we've done here is solution 2 with some tricks. With this approach, the\n * ID returned is an empty string on the first render. This way the server and\n * client have the same markup no matter how wild the concurrent rendering may\n * have gotten.\n *\n * After the render, we patch up the components with an incremented ID. This\n * causes a double render on any components with `useId`. Shouldn't be a problem\n * since the components using this hook should be small, and we're only updating\n * the ID attribute on the DOM, nothing big is happening.\n *\n * It doesn't have to be an incremented number, though--we could do generate\n * random strings instead, but incrementing a number is probably the cheapest\n * thing we can do.\n *\n * Additionally, we only do this patchup on the very first client render ever.\n * Any calls to `useId` that happen dynamically in the client will be\n * populated immediately with a value. So, we only get the double render after\n * server hydration and never again, SO BACK OFF ALRIGHT?\n */\n\nimport { useState, useEffect } from \"react\";\nimport { useIsomorphicLayoutEffect } from \"@reach/utils\";\n\nlet serverHandoffComplete = false;\nlet id = 0;\nconst genId = () => ++id;\n\n/**\n * useId\n *\n * Autogenerate IDs to facilitate WAI-ARIA and server rendering.\n *\n * Note: The returned ID will initially be `null` and will update after a\n * component mounts. Users may need to supply their own ID if they need\n * consistent values for SSR.\n *\n * @see Docs https://reacttraining.com/reach-ui/auto-id\n */\nexport const useId = (idFromProps?: string | null) => {\n  /*\n   * If this instance isn't part of the initial render, we don't have to do the\n   * double render/patch-up dance. We can just generate the ID and return it.\n   */\n  const initialId = idFromProps || (serverHandoffComplete ? genId() : null);\n\n  const [id, setId] = useState(initialId);\n\n  useIsomorphicLayoutEffect(() => {\n    if (id === null) {\n      /*\n       * Patch the ID after render. We do this in `useLayoutEffect` to avoid any\n       * rendering flicker, though it'll make the first render slower (unlikely\n       * to matter, but you're welcome to measure your app and let us know if\n       * it's a problem).\n       */\n      setId(genId());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (serverHandoffComplete === false) {\n      /*\n       * Flag all future uses of `useId` to skip the update dance. This is in\n       * `useEffect` because it goes after `useLayoutEffect`, ensuring we don't\n       * accidentally bail out of the patch-up dance prematurely.\n       */\n      serverHandoffComplete = true;\n    }\n  }, []);\n  return id != null ? String(id) : undefined;\n};\n"},"lineCount":null}},"error":null,"hash":"cc72f576ed1f16080244c3a4e168c136","cacheData":{"env":{}}}